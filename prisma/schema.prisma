generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teste {
  id    String  @id
  Nome  String
  Email String?
  CPF   String
}


model Turma {
  id      String   @id @default(uuid())
  Nome    String
  Alunos  Aluno[]
}

model Aluno {
  id        String   @id @default(uuid())
  Nome      String
  Matricula String   @unique
  Idade     Int?
  // Em vez de apenas Boolean, vamos modelar como um Laudo associado
  turmaId   String
  turma     Turma    @relation(fields: [turmaId], references: [id])
  laudos    Laudo[]
}

model Laudo {
  id          String             @id @default(uuid())
  dataEmissao DateTime           @default(now())
  alunoId     String
  aluno       Aluno              @relation(fields: [alunoId], references: [id])
  neurodivergencias NeurodivergenciaOnLaudo[]
}

model Neurodivergencia {
  id      String                  @id @default(uuid())
  nome    String                  @unique
  laudos  NeurodivergenciaOnLaudo[]
}

// Tabela pivô para relação N:N entre Laudo e Neurodivergencia

model NeurodivergenciaOnLaudo {
  laudoId           String
  neurodivergenciaId String

  laudo             Laudo           @relation(fields: [laudoId], references: [id])
  neurodivergencia  Neurodivergencia @relation(fields: [neurodivergenciaId], references: [id])

  @@id([laudoId, neurodivergenciaId])
}

model Acesso {
  id     String   @id @default(uuid())
  nome   String
  docentes Docente[]  // Um nível de acesso pode ter vários docentes
}

model Docente {
  id          String  @id @default(uuid())
  nome        String
  email       String?
  registo     String
  nivelAcesso String
  acesso      Acesso  @relation(fields: [nivelAcesso], references: [id])
}

